import scala.collection.mutable.ArrayBuffer
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient
import com.amazonaws.services.dynamodbv2.model._
import scala.collection.JavaConverters._

// Initialize DynamoDB client
val dynamoDbClient = AmazonDynamoDBClient.builder().build()

// Function to generate UpdateItemRequest based on openHomes being empty or not
def createUpdateRequests(row: Row, openHomes: Seq[Row], nowMillis: Long): Seq[UpdateItemRequest] = {
  if (openHomes.nonEmpty) {
    val openHomesHash = calculateOpenHomesHash(openHomes)

    // First request: Update the top-level `open_homes`
    val updateOpenHomesRequest = new UpdateItemRequest()
      .withTableName("mdp-mls-listing-ids-dev")
      .withKey(Map("mls_listing_id" -> new AttributeValue(row.getAs[String]("_id"))).asJava)
      .withUpdateExpression("SET open_homes = :openHomes")
      .withExpressionAttributeValues(Map(
        ":openHomes" -> new AttributeValue().withL(
          openHomes.map { openHome =>
            new AttributeValue().withM(
              openHome.schema.fieldNames.map { fieldName =>
                fieldName -> new AttributeValue(openHome.getAs[Any](fieldName).toString)
              }.toMap.asJava
            )
          }.asJava
        )
      ).asJava)

    // Second request: Update nested attributes
    val updateNestedAttributesRequest = new UpdateItemRequest()
      .withTableName("mdp-mls-listing-ids-dev")
      .withKey(Map("mls_listing_id" -> new AttributeValue(row.getAs[String]("_id"))).asJava)
      .withUpdateExpression(
        """SET open_homes.hash_code = :hashCode, 
          |open_homes.is_open_homes = :isOpenHomes, 
          |mls_listing_data.last_change_date = :lastChangeDate""".stripMargin
      )
      .withExpressionAttributeValues(Map(
        ":hashCode" -> new AttributeValue().withN(openHomesHash.toString),
        ":isOpenHomes" -> new AttributeValue().withBOOL(true),
        ":lastChangeDate" -> new AttributeValue().withN(nowMillis.toString)
      ).asJava)

    Seq(updateOpenHomesRequest, updateNestedAttributesRequest)
  } else {
    // First request: Update the top-level `open_homes` to an empty list
    val updateOpenHomesRequest = new UpdateItemRequest()
      .withTableName("mdp-mls-listing-ids-dev")
      .withKey(Map("mls_listing_id" -> new AttributeValue(row.getAs[String]("_id"))).asJava)
      .withUpdateExpression("SET open_homes = :openHomes")
      .withExpressionAttributeValues(Map(
        ":openHomes" -> new AttributeValue().withL(new java.util.ArrayList[AttributeValue]())
      ).asJava)

    // Second request: Update nested attributes for empty `open_homes`
    val updateNestedAttributesRequest = new UpdateItemRequest()
      .withTableName("mdp-mls-listing-ids-dev")
      .withKey(Map("mls_listing_id" -> new AttributeValue(row.getAs[String]("_id"))).asJava)
      .withUpdateExpression(
        """SET open_homes.hash_code = :hashCode, 
          |open_homes.is_open_homes = :isOpenHomes, 
          |mls_listing_data.last_change_date = :lastChangeDate""".stripMargin
      )
      .withExpressionAttributeValues(Map(
        ":hashCode" -> new AttributeValue().withN("0"),
        ":isOpenHomes" -> new AttributeValue().withBOOL(false),
        ":lastChangeDate" -> new AttributeValue().withN(nowMillis.toString)
      ).asJava)

    Seq(updateOpenHomesRequest, updateNestedAttributesRequest)
  }
}

// Function to execute requests sequentially
def executeSequentialUpdates(requests: Seq[UpdateItemRequest]): Unit = {
  requests.foreach { request =>
    try {
      dynamoDbClient.updateItem(request)
      println(s"Successfully updated item with key: ${request.getKey}")
    } catch {
      case e: Exception =>
        println(s"Error updating item with key: ${request.getKey}, error: ${e.getMessage}")
    }
  }
}

// Example usage
val updateRequests = createUpdateRequests(row, openHomes, nowMillis)
executeSequentialUpdates(updateRequests)
